.define CMD_GPIO 27        ; Command GPIO input (1 -> Command active)
.define STRB_GPIO 28       ; Strobe GPIO input (Strobe on falling edge)
.define CMD_RCV_IRQ 0      ; IRQ to signal command received

; State machine to do the command handshake
.program pico_profile_cmd
; Side pin is the busy
.side_set 1

.wrap_target
wait 0 gpio CMD_GPIO    side 0      
wait 1 gpio CMD_GPIO    side 0      ; Wait for the CMD to be raised
irq wait CMD_RCV_IRQ    side 0      ; Raise IRQ to signal new command
out pins, 8             side 0      ; Put what prepared by the MCU to the bus
wait 0 gpio CMD_GPIO    side 1      ; Wait for the CMD to be high
in pins, 11             side 1      ; Read response
set x, 0                side 1      ; Initialize x
loop:
jmp !x loop             side 1      ; Wait for X to be != 0
.wrap

; Program to read data (profile to host)
.program pico_profile_data_read

.wrap_target
wait_data:
;Host data is valid 100ns before the rising edge of strobe
    wait 0 gpio STRB_GPIO               ; Waits for strobe to be high
    wait 1 gpio STRB_GPIO               ; Waits for strobe to be low
    ;wait 0 gpio STRB_GPIO               ; Waits for strobe to be high
    jmp pin wait_data                   ; Loop if host is writting
read_data:
    ; Apple read something on bus
    out pins, 8                         ; Sets output to what it's in OSR
    jmp wait_data
.wrap

; Program to write data (host to profile)
.program pico_profile_data_write

.wrap_target
wait_data:
    wait 0 gpio STRB_GPIO               ; Waits for strobe to be high
    wait 1 gpio STRB_GPIO               ; Waits for strobe to be low
    jmp pin write_data                  ; Jumps depending on R/W
read_data:
    ; Do nothing as the host is reading
    jmp wait_data
write_data:
    in pins, 11                         ; Put to ISR what's on bus
.wrap
